[%
operation interpolareParameters(sql: String) {
    var pattern = Native("java.util.regex.Pattern");
    var matcher = pattern.compile("[&][a-zA-Z_][a-zA-Z\\d_]*").matcher(sql);
    var params = Sequence{};
    while (matcher.find()) {
        params.add(sql.substring(matcher.start() + 1, matcher.end()));
    }
    for (param in params) {
        var replaceValue = "'${jobParameters(" + '"' + param + '"' + ").asInstanceOf[String]}'";
        sql = sql.replace("&" + param, replaceValue.replace("[$]", "\\\\\\$"));
    }
    return sql;
}

operation nameIsValid(name): Boolean {
    if (not Native("java.lang.Character").isJavaIdentifierStart(name.charAt(0))) {
        return false;
    }
    var i = 1;
    while (i < name.length()) {
        if (not Native("java.lang.Character").isJavaIdentifierPart(name.charAt(i))) {
            return false;
        }
        i = i + 1;
    }
    return true;
}

operation toValidName(name: String): String {
    var result = "";
    if (Native("java.lang.Character").isJavaIdentifierStart(name.charAt(0))) {
        result = result + name.charAt(0);
    }
    else {
        result = result + '_' + name.charAt(0);
    }
    var i = 1;
    while (i < name.length()) {
        if (Native("java.lang.Character").isJavaIdentifierPart(name.charAt(i))) {
            result = result + name.charAt(i);
        }
        else {
            result = result + '_';
        }
        i = i + 1;
    }
    return result;
}

%]